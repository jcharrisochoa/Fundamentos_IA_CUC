# -*- coding: utf-8 -*-
"""Actividad-2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11cE0sxUADLJL345eYYfI9tBo1RWocEbp
"""

import pandas as pd
from sklearn.preprocessing import MinMaxScaler
from sklearn.neighbors import KNeighborsClassifier

def predecir_jugador_profesional_knn():
    """
    Predice si el jugador con ID 21 es profesional usando el algoritmo K-Nearest Neighbors (KNN).
    """

    # 1. Cargar los datos
    # Los datos se organizan en un diccionario para crear un DataFrame de pandas
    datos = {
        'ID': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],
        'Velocidad': [2.50, 3.75, 2.25, 3.25, 2.75, 4.50, 3.50, 3.00, 4.00, 4.25, 2.00, 5.00, 8.25, 5.75, 4.75, 5.50, 5.25, 7.00, 7.50, 7.25],
        'Agilidad': [6.00, 8.00, 5.50, 8.25, 7.50, 5.00, 5.25, 3.25, 4.00, 3.75, 2.00, 2.50, 8.50, 8.75, 6.25, 6.75, 9.50, 4.25, 8.00, 5.75],
        'Jugador_profesional': ['no', 'no', 'no', 'no', 'no', 'no', 'no', 'no', 'no', 'no', 'no', 'no', 'no', 'yes', 'yes', 'yes', 'yes', 'yes', 'yes', 'yes']
    }
    df = pd.DataFrame(datos)

    # 2. Preparar los datos
    # Separar las características (X) y la variable objetivo (y)
    X = df[['Velocidad', 'Agilidad']]
    y = df['Jugador_profesional']

    # 3. Normalizar las características
    # Usar MinMaxScaler para escalar los datos entre 0 y 1
    scaler = MinMaxScaler()
    X_escalado = scaler.fit_transform(X)

    # 4. Entrenar el modelo KNN
    # Se elige un valor de k (número de vecinos)
    # Un valor común es la raíz cuadrada del número de muestras
    k = int(len(X) ** 0.5)
    # Asegurarse de que k sea impar para evitar empates
    if k % 2 == 0:
        k += 1

    knn_model = KNeighborsClassifier(n_neighbors=k)
    knn_model.fit(X_escalado, y)

    # 5. Predecir para el jugador con ID 21
    # Crear un DataFrame para el jugador 21
    jugador21 = pd.DataFrame({
        'Velocidad': [6.75],
        'Agilidad': [3.00]
    })

    # Escalar los datos del jugador 21 usando el mismo escalador
    jugador21_escalado = scaler.transform(jugador21)

    # Realizar la predicción
    prediccion = knn_model.predict(jugador21_escalado)

    # Imprimir el resultado de la predicción
    print(f'La predicción para el jugador con ID 21 es: {prediccion[0]}')

    # Se pueden identificar los vecinos más cercanos para dar una explicación
    distancias, indices = knn_model.kneighbors(jugador21_escalado)

    print("\nLos vecinos más cercanos del jugador 21 son:")
    for i, idx in enumerate(indices[0]):
        vecino_info = df.iloc[idx]
        print(f"  - Vecino {i+1}: ID {vecino_info['ID']}, Velocidad {vecino_info['Velocidad']}, "
              f"Agilidad {vecino_info['Agilidad']}, Profesional: {vecino_info['Jugador_profesional']}")
    print(f"\nLa predicción se basa en la mayoría de votos de estos {k} vecinos.")

# Ejecutar la función
predecir_jugador_profesional_knn()